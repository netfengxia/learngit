// imagecropper 组件

// s:spot锚点. b:bottom, t:top, r:right, l:left, c:center
<div id="dragDiv">
	<div id="sbr"></div> <div id="sbl"></div>
	<div id="str"></div> <div id="stl"></div>
	<div id="src"></div> <div id="slc"></div>
	<div id="stc"></div> <div id="dbc"></div>
</div>

//样式 
#dragDiv{
	border:1px dashed #fff000;
	width:100px;
	height:60px;
	position:relative;
}

#sbr, #sbl, #str, #stl, #stc, #sbc, #slc, #src{
	border:1px solid #333;
	font-size:0;
	width:6px;
	height:6px;
}

#sbl{left:-4px; bottom:-4px;}
#sbr{right:-4px; bottom:-4px}
#str{right:-4px; top:-4px;}
#stl{left:-4px; top:-4px;}

#src{right:-4px; top:50%; margin-top:-4px}
#slc{left:-4px; top:50%; margin-top:-4px}
#stc{left:50%, top:-4px; margin-left:-4px}
#sbc{left:50%, bottom:-4px; marign-left:-4px}

#iebug{background-color:#fff; width:100%; height:100%;filter:alpha(opacity=0);}

..dragEl {
	position: absolute;
	background: #C00;
	width: 7px;;
	height: 7px;;
	z-index: 5;;
	font-size: 0;
}

.dragEl-changeColor {
	background-color: #00F;
}

.dragEl-t {
	cursor: n-resize;
	top: -4px;
	left: 0;
	width: 100% !important;
}

.dragEl-tc {
	cursor: n-resize;;
	top: -4px;;
	left: 50%;;
	margin-left: -4px;
}

.dragEl-b {
	cursor: s-resize;;
	bottom: -4px;
	left: 0;
	width: 100%;
	!
	important
}

.dragEl-bc {
	cursor: s-resize;;
	bottom: -4px;;
	left: 50%;;
	margin-left: -4px;
}

.dragEl-l {
	cursor: w-resize;;
	left: -4px;;
	top: 0;;
	height: 100%;
	!
	important
}

.dragEl-lc {
	cursor: w-resize;;
	left: -4px;;
	top: 50%;;
	margin-top: -4px;
}

.dragEl-r {
	cursor: e-resize;;
	right: -4px;;
	top: 0;;
	height: 100%;
	!
	important
}

.dragEl-rc {
	cursor: e-resize;;
	right: -4px;;
	top: 50%;;
	margin-top: -4px;
}

.dragEl-tl {
	cursor: nw-resize;;
	left: -4px;;
	top: -4px;
}

.dragEl-tr {
	cursor: ne-resize;;
	right: -4px;;
	top: -4px;
}

.dragEl-bl {
	cursor: sw-resize;;
	left: -4px;;
	bottom: -4px;
}

.dragEl-br {
	cursor: se-resize;;
	right: -4px;
	background: #ff00cc !important;
	bottom: -4px;
}

Ext.ux.resizeSpot = funciton(el, c){
	this.el = Ext.get(el);
	for(var p in c || {})
		this[p] = c[p];
	this.init(c);
}
resize.prototype = {
	spots: 'tl, tr, bl, br, tc, bc, lc, rc';
	dragPos:{
		t:function(){}, b:function(){},
		l:function(){}, r:function(){},
		tl:function(){}, tr:function(){},
		bl:function(){}, br:function(){},
		tc:function(){}, bc:function(){},
		lc:function(){}, rc:function(){}
	},
	init:function(){
		this.style.position = "absolute";
		var s = this.spots.split(/\s*?[;,]\s*?| /);
		for (var i = 0, len = s.length; i< len; i++){
			var pos = s[i];
			if(pos && this.dragPos[pos]){
				this.createEl(pos);
			}
		}
		var currentStyle = function(el){
			return el.computedStyle || document.defaultView.getComputedStyle(el, null);
		}
		var cs = currentStyle(this.el);
		this.borderX = (parseFloat(cs.borderLeftWidth()) || 0) +(parseFloat(cs.borderRightWidth()||0));
		this.borderY = (parseFloat(cs.borderBottomWidth()) || 0) +(parseFloat(cs.borderTopWidth()||0));
	},
	getStyle : function(){
		var view = document.defaultView, propCache = {}
			, camelRe = /(-[a-z])/gi;
		var camelFn =function(m, a){
			return a.charAt(1).toUpperCase();
		};
		return view && view.getComputedStyle ?
		function(el, prop){
			var v, cs, camel;
			if(prop =='float'){
				prop = 'cssFloat';
			}
			if(v = el.style[prop]){return v;}
			if(cs = view.getComputedStyle(el, "")){
				if(!(camel = propCache[prop])){
					camel = propCache[prop] = prop.replace(camelRe, camelFn);
				}
				camel = prop.replace(camelRe, camelFn);
				return cs[camel];
			}
			return null;
		}
		:function(e, prop){
			var v, cs, camel;
			if(prop='opacity'){
				if(typeof el.style.filter == 'string'){
					var m = el.style.filter.match(/alpha\(opacity=(.*)\)/i);
					if(m){
						var fv = parseFloat(m[1]);
						if(!isNaN(fv)){
							return fv ? fv / 100:0;
						}
					}
					return 1;
				}
			}else if(prop == 'float'){
					prop = 'styleFloat';
				}
			if(!(camel = propCache[prop])){
				camel = propCache[prop] = prop.replace(camelre, camelFn);
			}
			if(v = el.style[camel]){return v;}
			if(cs = el.currentStyle){return cs[camel];}
			return null;
		};
	}(),	// 返回相应处理函数. 它会排他处理两个棘手的属性opacity, float

	// 用来创建相应的能用的拖曳点,一次只创建一个点哦.
	createEl:function(pos){
		var el = document.createElement('div');
		this.addClass(el, ['dragEl','dragEl-'+pos]);
		this.addClassOnOver(el, 'dragEl-changeColor');
		this.el.appendChild(el);
		this.transparent?(this.isIE?(el.style.filter = "alpha(opacity=0)"):(el.style['opacity'] = 0)):'';
		this.addEvent(el, 'mousedown', this.bindAsListener(this, this.start, el, pos));
		return el;
	},

	setStyle: function(el, prop, value){
		var view  = document.defaultView, camel, propCache={}, camelRe= /(-[a-z])/gi;
		var camelFn = function(m, a){
			return a.charAt(1).toUpperCase();
		};
		if(!(camel = propCache[prop])){
			camel = propCache[prop] = prop.replace(camelRe, camelFn);
		}
		var setOpacity = function(el, opacity){
			var s = el.style;
			if(isIE){
				s.zoom = 1;
				s.filter = (s.filter || '').replace(/alpha\([^\)]*\)/gi, '') + (opacity ==1?"":" alpha(opacity="+opactiy*100+")");
			}else{
				s.opacity = opacity;
			}
		}
		(camel == 'opacity') ? setOpacity(el, value):(el.style[camel]=value);
	},
	addClass:function(el, cn){
		var hasClass = function(el,cn){
			return cn && (' ' + el.cn +' ').indexOf(' '+cn+' ') != -1;
		};
		if(cn.length && (typeof cn.splice == 'function')){
			for(var i = 0, len = cn.length; i < len ;i++){
				this.addClass(el, cn[i]);
			}
		}else{
			(cn && !hasClass(cn))?el.className = el.className + ' ' + cn  : ''
		}
	},
	addClassOnOver : function(el, cn){
		var t = this;
		this.addEvent(el, 'mouseover', function(){
			t.addClass(el, cn);
		});
		this.addEvent(el, 'mouseout', function(){
			t.removeClass(el, cn);
		})
	},

	insertRule:function(selector, styles, n){
		var rules, ss = document.styleSheets[0];
		if(!ss){
			var head = document.getElementsByTagName("head")[0];
			rules = doc.craeteElement("style");
			rules.setAttribute("type", "text/css");
			head.appendChild(rules);		// 向head标签加入一个style标签
			ss = rules.styleSheet ? rules.styleSheet : document.styleSheets[0];
		}	// 最终目的是把要新加的选择规则放到文档第一个style标签中.
		if(!styles){
			ss.cssText = ss.cssText + selector;
			return ;
		}
		rules = ss.cssRules ? ss.cssRules : ss.rules;
		var n1 = n ? n : rules.length;
		if(ss.insertRule){
			ss.insertRule(selector + "{" +styles+"}", n1);
		}else{
			ss.addRule(select, styles, n1);
		}
	},
	start:function(e, el, pos){
		this.startPos = {
			w : this.el.offsetWidth || 0, 
			h : this.el.offsetHeight || 0,
			x : this.getPageXY(this.el).x || 0,
			y : this.getPageXY(this.el).y || 0
		};
		this.startPoint = this.getPointXY(e);
		this.pos = pos;
		this._move = this.bindAsListener(this, this.onMouseMove, el, pos);
		this._up = this.bindAsListener(this, this.onMouseUp, el, pos);
		this.addEvent(document, 'mousemove', this._move);
		this.addEvent(document, 'mouseup', this._up);
	},

	resizeEl : function(nb){
		nb.x < 0 ? nb.x = 0 : "";
		nb.y < 0 ? nb.y = 0 : "";
		nb.w < 0 ? nb.w = 0 : "";
		nb.h < 0 ? nb.h = 0 : "";
		with(this.el.style){
			width = nb.w + "px";
			height = nb.h +"px";
		}
		this.setXY(this.el, [nb.x, nb.y]);
		if(this.onResize)
			this.onResize();
	}, 

	getWidth : function(contentWidth){
		var w = this.dom.offsetWidth || 0;
		w = contentWidth !== true ? w : w - this.getBorderWidth('lr') - this.getPadding("lr");
		return w < 0 ? 0 : w;
	}
}

