// 8-4-3
getAnchorXY:function(anchor, local, s){
	anchor = (anchor || 'tl').toLowerCase();
	s = s || {};
	var me = this,
		vp = me.dom == document.body || me.dom == doucment,
		w = s.width || vp ? Ext.lib.Dom.getViewWidth() : me.getWidth(),
		h = s.height || vp ? Ext.lib.Dom.getViewHeight() : me.getHeight(),
		xy, 
		r = Math.round,
		o = me.getXY(),
		scroll = me.getScroll(),
		extraX = vp? scroll.left : !local? o[0] : 0,
		extraY = vp? scroll.top  : !local? o[1] : 0,
		hash = {
			c : [r(w*.5), r(h*.5)],
			t : [r(w*.5), 0],
			l : [0, r(h*.5)],
			r : [w, r(h*.5)],
			b : [r(w*.5), h],
			tl: [0,0],
			bl: [0,h],
			br: [w,h],
			tr: [w,0]
		};
	xy = hash[anchor];
	return [xy[0] + extraX , xy[1] + extraY];
};

// 8-4-4
anchorTo: function(el, alignment, offsets, animate, monitorscroll, callback){
	var me = this;
	function action(){
		this.alignTo(el, alignment,offsets, animate);
		Ext.callback(callback, this);
	};
	Ext.EventManager.onWindowResize(action, me);
	if(!Ext.isEmtpy(monitorScroll)){
		Ext.EventManger.on(window, 'scroll', action, me, {buffer : !isNaN(montiontorScroll)  monitorScroll : 50 });
	}
	action.call(me);
	return me;
}

// 8-4-5
scroll : function(direction, distance, animate){
	if(!this.isScrollable()){return;}

	var el = this.dom, 
		l = el.scrollLeft, t = el.scrollTop,
		w = el.scrollWidth, h = el.scrollHeight,
		cw = el.clientWidth, ch = el.clientHeight,
		scrolled = false,
		v,
		hash = {
			l : Math.min( l + distance, w - cw),
			r : v = Math.max(l - distance, w - cw),
			t : Math.max(t - distance, 0),
			b : Math.min(t + distance, h - ch)
		};
	hash.d = hash.b, hash.u = hash.t;
	direction = direction.substr(0,1);
	if( (v = hash[direction]) > -1)
	{
		scrolled = true;
		this.scrollto(direction == 'l' || direction == 'r' ? 'left' : 'top', v, this.preanim(arguments, 2));
	}
	return scrolled;
}

// 8-4-6
scrollTop : function(side, value, animate){
	var tester = /top/i,
		prop = "scroll" + (tester.test(side) ? 'Top' : 'Left'),
		me = this, 
		dom = this.dom,
		if(!animate || !me.anim){
			dom[prop] = value;
		}else{
			me.anim({scroll:{to:tester.test(prop)?[dom[prop], value] : [value, dom[prop]]}}, me.preanim(arguments, 2), 'scroll');
		}
	return me;
}

// 8-4-7 把某元素显示到容器的可视区域
scrollIntoView : function(container, hscroll){
	var c = Ext.getdom(container) || Ext.getBody().dom,
		el = this.dom,
		o = this.getOffsetsTo(c),	// 当前元素与容器之间的距离. 
		l = o[0] + c.scrollLeft,
		t = o[1] + c.scrollTop,
		b = t + el.offsetHeight,
		r = l + el.offsetWidth,
		ch = c.clientHeight,
		ct = parseInt(c.scrollTop, 10), 
		cl = parseInt(c.scrollLeft, 10),
		cb = ct + ch,
		cr = cl + c.clientWidth;
	if(el.offsetHeight > ch || t < ct){
		c.scrollTop = t;
	}else if(b > cb){
		c.scrollTop  = b-ch;
	}
	c.scrollTop = c.scrollTop;
	if(hscroll !== false){
		if(el.offsetWidth > c.clientWdith || l < cl){
			c.scrollLeft = l;
		}else if(r > cr){
			c.scrollLeft = r - c.clientWidth;
		}
		c.scrollLeft = c.scrollLeft;
	}
	return this;
}

// 8-4-8
t : function(b, d){
	var b = this.clone(b);
	b.y += d.y;
	b.height -= d.y;
	return b;
};

// 8-4-9
tl: function(b,d){
	var b = this.clone(b);
	b.width -= d.x;
	b.height -= d.y;
	b.x += d.x;
	b.y += d.y;
};

minWidth:0, minHeight:0, maxWidth: 10000, maxHeight: 10000
// 8-4-10 delta即为增量值 按最大最小值约束.
constrain : function(wh, delta, min, max){
	if(wh + delta <min){
		delta = wh - min;
	}else if(wh + delta >max){
		delta = max - wh;
	}
	return delta;
}

// 8-4-11 约束函数
limit : function(b, d, xy){
	if(this.limitFlag){
		if(xy == 'x'){
			d.x = this.constrain(b.width, d.x, this.minWidth, this.maxWidth);
		}else if(xy == 'y'){
			d.y = this.constrain(b.height, d.y, this.minHeight, this.maxHeight);
		}else if(xy == 'xy'){
			d.x = this.constrain(b.width, d.x, this.minWidth, this.maxWidth);
			d.y = this.constrain(b.height, d.y, this.minHeight, this.maxHeight);
		}
	}
};

// 8-4-12 按比例约束. d是增量部分.
calDelta: function(d, b, xy){
	if(this.ratio) { 
		if(xy == 'h-w'){
			d.x = this.adjustValue(d.y, 'h');
		}else{
			d.y = this.adjustValue(d.x);
		}
		if(d.x > (this.maxWidth - b.width)) { 
			d.x = this.maxWidth - b.width;
			d.y = this.adjustValue(d.x);
		}else if(d.x < (this.minWidth - b.width)){
			d.x = this.minWidth - b.width;
			d.y = this.adjustValue(d.x);
		}
	}
};
adjustValue:function(v, h){
	return h ? Math.round(v * this.scale) : Math.round(v / this.scale);
};


// 8-4-13 拖动顶边进行绽放操作,上下拖动时,左右是以中线为基准来缩放的.
adjustRatio : function(b, d, s){
	if(this.ratio){
		switch(s){
			case 't':
				b.width = b.width - d.x;
				b.x = b.x + d.x/2;
				break;
			case 'b':
				b.width = b.width + d.x;
				b.x = b.x - d.x / 2;
				break;
			case 'l':
				b.height = b.height - d.y;
				b.y = b.y + d.y / 2;
				break;
			case 'r':
				b.height = b.height + d.y;
				b.y = b.y - d.y / 2;
				break;
			case 'tr':
				d.x = -d.x;
				break;
			case 'bl':
				d.y = -d.y;
				break;
		}
	}
}

// 8-4-14 元素反转
recover : function(b, pos){
	this.curPos = pos;
	this.curBox = this.clone(b);
	this.startPoint = this.clone(this.nowPoint);
	return null;
};
